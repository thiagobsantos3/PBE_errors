export interface User {
  id: string;
  email: string;
  name: string;
  nickname?: string;
  role: 'admin' | 'user';
  avatar?: string;
  createdAt: string;
  subscription?: Subscription;
  teamId?: string;
  teamRole?: 'owner' | 'admin' | 'member';
  maxTeamMembers?: number;
  planSettings?: PlanSettings | null;
}

export interface Subscription {
  id: string;
  plan: 'free' | 'pro' | 'enterprise';
  status: 'active' | 'canceled' | 'expired';
  currentPeriodEnd: string;
  cancelAtPeriodEnd: boolean;
  cancelledAt?: string;
}

export interface PlanPrice {
  id?: string; // Optional, as it's generated by DB
  plan_id: string;
  currency: 'USD' | 'GBP' | 'AUD' | 'CAD';
  interval: 'monthly' | 'yearly';
  amount: number;
  stripe_price_id?: string; // Optional, will be populated after Stripe sync
  created_at?: string;
  updated_at?: string;
}

export interface Plan {
  id: string;
  name: string;
  is_enabled: boolean;
  description?: string;
  created_at: string;
  updated_at: string;
  prices?: PlanPrice[]; // NEW: Array of associated prices
}

export interface PlanSettings {
  id: string;
  plan_id: string;
  max_questions_custom_quiz: number;
  max_team_members: number;
  question_tier_access: string[];
  allow_quick_start_quiz: boolean;
  allow_create_own_quiz: boolean;
  allow_study_schedule_quiz: boolean;
  allow_analytics_access: boolean;
  created_at: string;
  updated_at: string;
}

export interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  signup: (email: string, password: string, name: string, teamName: string) => Promise<void>;
  signupForInvitation: (email: string, password: string, name: string) => Promise<void>;
  updateUserProfile: (updates: { name?: string; email?: string }) => Promise<void>;
  updatePassword: (newPassword: string) => Promise<void>;
  forgotPassword: (email: string) => Promise<void>;
  resetPasswordWithToken: (accessToken: string, newPassword: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
  hasSession: boolean;
  profileLoading: boolean;
  isDeveloperMode: boolean;
  toggleDeveloperMode: () => void;
}

export interface DashboardStats {
  totalUsers: number;
  totalRevenue: number;
  activeSubscriptions: number;
  growthRate: number;
}

export interface Team {
  id: string;
  name: string;
  description?: string;
  ownerId: string;
  createdAt: string;
  memberCount: number;
  maxMembers: number;
}

export interface TeamMember {
  id: string;
  userId: string;
  teamId: string;
  role: 'owner' | 'admin' | 'member';
  status: 'active' | 'pending' | 'suspended';
  invitedBy: string;
  joinedAt: string;
  createdAt: string;
  updatedAt: string;
  // Joined user data
  user: {
    id: string;
    name: string;
    email: string; // Now consistently fetched from database
    lastActive: string;
  };
}

export interface TeamMemberForSchedule {
  id: string;
  userId: string;
  teamId: string;
  role: 'owner' | 'admin' | 'member';
  status: 'active' | 'pending' | 'suspended';
  joinedAt: string;
  user: {
    id: string;
    name: string;
    email?: string;
  };
}

export interface TeamInvitation {
  id: string;
  teamId: string;
  email: string;
  role: 'admin' | 'member';
  invitedBy: string;
  token: string;
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  expiresAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface Question {
  id: string;
  book_of_bible: string;
  chapter: number;
  question: string;
  answer: string;
  points: number;
  time_to_answer: number;
  tier: 'free' | 'pro' | 'enterprise';
  created_at: string;
  updated_at: string;
  created_by?: string;
}

export interface QuestionContextType {
  questions: Question[];
  loading: boolean;
  fetchQuestions: () => Promise<void>;
  createQuestion: (question: Omit<Question, 'id' | 'created_at' | 'updated_at' | 'created_by'>) => Promise<void>;
  updateQuestion: (id: string, question: Partial<Question>) => Promise<void>;
  deleteQuestion: (id: string) => Promise<void>;
}

export interface Quiz {
  id: string;
  name: string;
  description?: string;
  questions: Question[];
  created_by: string;
  created_at: string;
  is_active: boolean;
}

export interface QuizResult {
  questionId: string;
  pointsEarned: number;
  totalPoints: number;
  timeSpent: number;
  answeredAt: string;
}

export interface QuizSession {
  id: string;
  type: 'quick-start' | 'custom' | 'study-assignment';
  title: string;
  description: string;
  user_id: string;
  team_id?: string;
  assignment_id?: string; // For study assignment quizzes
  questions: Question[];
  current_question_index: number;
  results: QuizResult[];
  status: 'active' | 'completed' | 'paused';
  created_at: string;
  updated_at: string;
  completed_at?: string;
  // Quiz state for resuming
  show_answer: boolean;
  time_left: number;
  timer_active: boolean;
  timer_started: boolean;
  has_time_expired: boolean;
  // Progress tracking
  total_points: number;
  max_points: number;
  estimated_minutes: number;
  bonus_xp?: number;
}

export interface QuizSessionContextType {
  sessions: QuizSession[];
  createQuizSession: (session: Omit<QuizSession, 'id' | 'created_at' | 'updated_at'>) => Promise<string>;
  loadQuizSession: (sessionId: string) => QuizSession | null;
  updateQuizSession: (sessionId: string, updates: Partial<QuizSession>) => Promise<void>;
  deleteQuizSession: (sessionId: string) => Promise<void>;
  getActiveSessionsForUser: (userId: string) => QuizSession[];
  getSessionForAssignment: (assignmentId: string, userId: string) => QuizSession | null;
}

export interface QuizAnswer {
  question_id: string;
  answer: string;
  is_correct: boolean;
  time_spent: number;
  answered_at: string;
}

export interface QuizQuestionLog {
  id: string;
  quiz_session_id: string;
  user_id: string;
  question_id: string;
  points_earned: number;
  total_points_possible: number;
  time_spent: number;
  answered_at: string;
  is_correct: boolean;
  created_at: string;
}

export interface StudyItem {
  book: string;
  chapters: number[];
  verses?: number[]; // Optional array of specific verses within the chapters
}

export interface StudyAssignment {
  id: string;
  user_id: string;
  team_id: string;
  date: Date;
  study_items: StudyItem[];
  description?: string;
  created_by?: string;
  created_at?: string;
  updated_at?: string;
  completed?: boolean;
  completed_at?: string;
  // Quiz session data (populated from latest completed quiz session)
  total_points_earned?: number;
  max_points_possible?: number;
  total_questions_answered?: number;
  total_time_spent_minutes?: number;
  quiz_session_id?: string;
}

export interface UserStats {
  user_id: string;
  total_xp: number;
  current_level: number;
  longest_streak: number;
  current_streak?: number; // Add current_streak
  current_streak?: number; // Add current_streak
  last_quiz_date?: string;
}

export interface Achievement {
  id: string;
  name: string;
  description: string;
  criteria_type: string;
  criteria_value: number;
  badge_icon_url: string;
}

export type AchievementCriteriaType = 
  | 'total_quizzes_completed'
  | 'total_points_earned'
  | 'longest_streak'
  | 'total_questions_answered'
  | 'perfect_quiz'
  | 'speed_demon'
  | 'bonus_xp'
  | 'accuracy_book_ruth'
  | 'accuracy_book_esther'
  | 'accuracy_book_daniel'
  | 'accuracy_chapter'
  | 'accuracy_tier_free'
  | 'accuracy_tier_pro'
  | 'accuracy_tier_enterprise';

export interface UserAchievement {
  user_id: string;
  achievement_id: string;
  unlocked_at: string;
}